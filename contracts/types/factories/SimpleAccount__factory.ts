/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { SimpleAccount, SimpleAccountInterface } from "../SimpleAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "anEntryPoint",
        type: "address",
      },
      {
        internalType: "address",
        name: "anOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldEntryPoint",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newEntryPoint",
        type: "address",
      },
    ],
    name: "EntryPointChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "addDeposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dest",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "func",
        type: "bytes",
      },
    ],
    name: "exec",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "dest",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "func",
        type: "bytes[]",
      },
    ],
    name: "execBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dest",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "func",
        type: "bytes",
      },
    ],
    name: "execFromEntryPoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "dest",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newEntryPoint",
        type: "address",
      },
    ],
    name: "updateEntryPoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "aggregator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawDepositTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080346100a657601f61117b38819003918201601f19168301916001600160401b038311848410176100ab5780849260409485528339810103126100a65780516001600160a01b0391828216918290036100a6576020015191821682036100a657600180546001600160a01b031916919091179055600080546001600160601b031660609290921b6001600160601b0319169190911790556040516110b990816100c28239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80630565bb671461010b5780630825d1fc146101025780631b71bb6e146100f95780634a58db19146100f05780634d44560d146100e757806380c5c7d0146100de5780638da5cb5b146100d5578063a9059cbb146100cc578063affed0e0146100c3578063b0d691fe146100ba578063c399ec88146100b15763d0cb75fa0361000e576100ac6107f9565b61000e565b506100ac6106e7565b506100ac610694565b506100ac610649565b506100ac6105c2565b506100ac610582565b506100ac610561565b506100ac61048d565b506100ac61042c565b506100ac61037c565b506100ac6101de565b506100ac6101b0565b73ffffffffffffffffffffffffffffffffffffffff81160361013257565b600080fd5b9060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126101325760043561016e81610114565b916024359160443567ffffffffffffffff9283821161013257806023830112156101325781600401359384116101325760248483010111610132576024019190565b5034610132576100196101d86101c536610137565b6101d194929394610b09565b3691610b86565b9161106c565b5034610132577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6080813601126101325760043567ffffffffffffffff811161013257610160816004019282360301126101325761023d604435610114565b610245610c72565b60405160208101907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008252602435603c820152603c8152610285816109e9565b51902073ffffffffffffffffffffffffffffffffffffffff6102c96102c160005460601c936102bb6101d1610144880189610947565b90610f73565b919091610dea565b16148015610374575b156103165760446102e4910182610947565b905015610307575b6102f7606435610abf565b60405160008152602090f35b0390f35b61031090610cf1565b386102ec565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6163636f756e743a2077726f6e67207369676e617475726500000000000000006044820152fd5b5032156102d2565b50346101325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610132576004356103b881610114565b6103c0610b09565b7fffffffffffffffffffffffff000000000000000000000000000000000000000060015473ffffffffffffffffffffffffffffffffffffffff809316809382167f450909c1478d09248269d4ad4fa8cba61ca3f50faed58c7aedefa51c7f62b83a600080a31617600155005b506000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261048a578080808073ffffffffffffffffffffffffffffffffffffffff6001541634905af1610481610a8f565b501561048a5780f35b80fd5b503461013257600060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261048a576004356104cb81610114565b6104d3610b09565b8173ffffffffffffffffffffffffffffffffffffffff806001541692833b1561055d576044908360405195869485937f205c287800000000000000000000000000000000000000000000000000000000855216600484015260243560248401525af18015610550575b610544575080f35b61054d906109c8565b80f35b610558610afc565b61053c565b8280fd5b5034610132576100196101d861057636610137565b6101d194929394610c72565b50346101325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013257602060005460601c604051908152f35b50346101325760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013257600080808060043561060381610114565b6024359061060f610b09565b8290821561063f575b73ffffffffffffffffffffffffffffffffffffffff1690f11561063757005b610019610afc565b6108fc9150610618565b50346101325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101325760206bffffffffffffffffffffffff60005416604051908152f35b50346101325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013257602073ffffffffffffffffffffffffffffffffffffffff60015416604051908152f35b5034610132576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261048a576024602073ffffffffffffffffffffffffffffffffffffffff60015416604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa9081156107bb575b8291610781575b604051828152602090f35b90506020813d82116107b3575b8161079b60209383610a05565b810103126107af5761030391505138610776565b5080fd5b3d915061078e565b6107c3610afc565b61076f565b9181601f840112156101325782359167ffffffffffffffff8311610132576020808501948460051b01011161013257565b50346101325760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101325767ffffffffffffffff6004358181116101325761084a9036906004016107c8565b9091602435908111610132576108649036906004016107c8565b919061086e610b09565b8282036108e95760005b82811061088157005b806108ae61089a610895600194878a610c1d565b610c3b565b6108a86101d1848988610c48565b90611044565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108dc575b01610878565b6108e4610bbd565b6108d6565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f77726f6e67206172726179206c656e67746873000000000000000000000000006044820152fd5b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610132570180359067ffffffffffffffff82116101325760200191813603831361013257565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116109dc57604052565b6109e4610998565b604052565b6060810190811067ffffffffffffffff8211176109dc57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109dc57604052565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff8111610a82575b01160190565b610a8a610998565b610a7c565b3d15610aba573d90610aa082610a46565b91610aae6040519384610a05565b82523d6000602084013e565b606090565b80610ac75750565b600080808093337ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff150610af9610a8f565b50565b506040513d6000823e3d90fd5b60005460601c33148015610b7d575b15610b1f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79206f776e6572000000000000000000000000000000000000000000006044820152fd5b50303314610b18565b929192610b9282610a46565b91610ba06040519384610a05565b829481845281830111610132578281602093846000960137010152565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9190811015610c2e575b60051b0190565b610c36610bed565b610c27565b35610c4581610114565b90565b9091610c6192811015610c65575b60051b810190610947565b9091565b610c6d610bed565b610c56565b73ffffffffffffffffffffffffffffffffffffffff600154163303610c9357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e74000000006044820152fd5b6020600054916bffffffffffffffffffffffff927fffffffffffffffffffffffffffffffffffffffff00000000000000000000000084821694808614610da4575b6001860116911617600055013503610d4657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6163636f756e743a20696e76616c6964206e6f6e6365000000000000000000006044820152fd5b610dac610bbd565b610d32565b60051115610dbb57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610df381610db1565b80610dfb5750565b610e0481610db1565b60018103610e6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b610e7481610db1565b60028103610edb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b80610ee7600392610db1565b14610eee57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b906041815114600014610f9d57610c61916020820151906060604084015193015160001a90610fa7565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116110385791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa1561102b575b815173ffffffffffffffffffffffffffffffffffffffff811615611025579190565b50600190565b611033610afc565b611003565b50505050600090600390565b600091829182602083519301915af161105b610a8f565b90156110645750565b602081519101fd5b916000928392602083519301915af161105b610a8f56fea26469706673582212208f70d1dd0a2b5cde52e89b65ab72ce4428d0cfceb0ade07528a5075b610f01e564736f6c63430008110033";

type SimpleAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleAccount__factory extends ContractFactory {
  constructor(...args: SimpleAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    anEntryPoint: PromiseOrValue<string>,
    anOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleAccount> {
    return super.deploy(
      anEntryPoint,
      anOwner,
      overrides || {}
    ) as Promise<SimpleAccount>;
  }
  override getDeployTransaction(
    anEntryPoint: PromiseOrValue<string>,
    anOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(anEntryPoint, anOwner, overrides || {});
  }
  override attach(address: string): SimpleAccount {
    return super.attach(address) as SimpleAccount;
  }
  override connect(signer: Signer): SimpleAccount__factory {
    return super.connect(signer) as SimpleAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleAccountInterface {
    return new utils.Interface(_abi) as SimpleAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleAccount {
    return new Contract(address, _abi, signerOrProvider) as SimpleAccount;
  }
}
